/* eslint-disable no-unused-vars */
import { Field, SmartContract, state, State, method, Struct, DeployArgs, Permissions, PublicKey, Poseidon, CircuitString, Signature, Bool } from 'snarkyjs';

let fetcher0 = Poseidon.hash(PublicKey.fromBase58("B62qr5gawtLkgKHQNstAbtpyCpbF7eUjs8A1SSZ4d8yN1ge68c8aSds").toFields());
let fetcher1 = Poseidon.hash(PublicKey.fromBase58("B62qmaGeCZrbSMDjAqBujy1ARCbVAAhDAPpjoKwcAtTn7zkBFMdBmBZ").toFields());
let fetcher2 = Poseidon.hash(PublicKey.fromBase58("B62qnFsdNiXL1BGNXWWN6GADSnZA3yiq55tq2UyVjXnzeYdFeYPVdq5").toFields());
let fetcher3 = Poseidon.hash(PublicKey.fromBase58("B62qpLNP1MVYuLgEYFuRcAzru84YTtk7hxrPXuizRck62kLza6BextX").toFields());
let fetcher4 = Poseidon.hash(PublicKey.fromBase58("B62qrz4xLtNuyWyvoEmkXzoicSMZmSjDkL5Dd9SubGmdDEZpSe1MS3W").toFields());

export class FetcherPKList extends Struct([
  Field, Field, Field, Field, Field,
]) { 
  public assertEqual(f: FetcherPKList): Bool{
    let rs = Bool(false);
    this.forEach((p, idx)=>{
      f[idx].assertEquals(p);
    });
    rs = Bool(true);
    
    return rs;
  }
}

export class Voracle extends SmartContract {
  @state(FetcherPKList) fetcherPKList = State<FetcherPKList>();

  deploy(args: DeployArgs) {
    super.deploy(args);
    this.setPermissions({
      ...Permissions.default(),
      editState: Permissions.proofOrSignature(),
    });
    this.fetcherPKList.set(FetcherPKList.fromFields([fetcher0, fetcher1, fetcher2, fetcher3, fetcher4]));
  }

  @method verifySig(data: CircuitString, sig: Signature, fetcherPk: PublicKey) {
    const fetcherPKList = this.fetcherPKList.get();
    fetcherPKList.

  }
}
